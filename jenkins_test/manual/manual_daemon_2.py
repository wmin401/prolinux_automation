import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from auto.__common__.__parameter__ import RESULT_PATH, VERSION_DETAIL

from manual.linux_regression.__module__ import command_exec, execMode, makeFolder
import manual.linux_regression.__import__ as reg


def main():
    print("* Manual Daemon 2 Test Case")
    ## 초기화 부분 ##############################
    testResult = []

    # 8.3 버전
    command_exec(execMode, 'touch /var/crash/test')
    command_exec(execMode, 'systemctl start abrtd.service')
    command_exec(execMode, 'systemctl start abrt-vmcore.service')
    test1 = reg.exec_test('abrt-vmcore.service', 'systemctl status abrt-vmcore.service', 'output', 'Active: active')
    testResult.append(test1)
    command_exec(execMode, 'rm -rf /var/crash/test')
    command_exec(execMode, 'systemctl stop abrtd.service')
    command_exec(execMode, 'systemctl stop abrt-vmcore.service')
    test1 = reg.exec_test('abrt-vmcore.service', 'systemctl status abrt-vmcore.service', 'output', 'Active: inactive')
    testResult.append(test1)

    command_exec(execMode, 'mv /var/lib/cloud/instance /var/lib/cloud/instance_back') #/etc/ssh/sshd_config 내 PasswordAuthentication yes 주석 해제 필요
    command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled /etc/cloud/cloud-init.disabled.bak')
    command_exec(execMode, 'systemctl start cloud-config.service')
    test1 = reg.exec_test('cloud-config.service', 'systemctl status cloud-config.service', 'output', 'Active: active')
    testResult.append(test1)
    command_exec(execMode, 'mv /var/lib/cloud/instance_back /var/lib/cloud/instance')
    command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled.bak /etc/cloud/cloud-init.disabled')
    command_exec(execMode, 'systemctl stop cloud-config.service')
    test1 = reg.exec_test('cloud-config.service', 'systemctl status cloud-config.service', 'output', 'Active: inactive')
    testResult.append(test1)

    command_exec(execMode, 'mv /var/lib/cloud/instance /var/lib/cloud/instance_back')
    command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled /etc/cloud/cloud-init.disabled.bak')
    command_exec(execMode, 'systemctl start cloud-final.service')
    test1 = reg.exec_test('cloud-final.service', 'systemctl status cloud-final.service', 'output', 'Active: active')
    testResult.append(test1)
    command_exec(execMode, 'mv /var/lib/cloud/instance_back /var/lib/cloud/instance')
    command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled.bak /etc/cloud/cloud-init.disabled')
    command_exec(execMode, 'systemctl stop cloud-final.service')
    test1 = reg.exec_test('cloud-final.service', 'systemctl status cloud-final.service', 'output', 'Active: inactive')
    testResult.append(test1)

    command_exec(execMode, 'systemctl start dbus.socket')
    command_exec(execMode, 'systemctl start dbus.service')
    test1 = reg.exec_test('dbus.service', 'systemctl status dbus.service', 'output', 'Active: active')
    testResult.append(test1)
    command_exec(execMode, 'systemctl stop dbus.socket')
    command_exec(execMode, 'systemctl stop dbus.service')
    test1 = reg.exec_test('dbus.service', 'systemctl status dbus.service', 'output', 'Active: inactive')
    testResult.append(test1)

    command_exec(execMode, 'systemctl start httpd.service')
    command_exec(execMode, 'sleep 1')
    test1 = reg.exec_test('httpd.service', 'systemctl status httpd.service', 'output', 'Active: active')
    testResult.append(test1)
    command_exec(execMode, 'systemctl stop httpd.service')
    test1 = reg.exec_test('httpd.service', 'systemctl status httpd.service', 'output', 'Active: inactive')
    testResult.append(test1)

    command_exec(execMode, 'mkdir -p /dev/vmbus/')
    command_exec(execMode, 'touch /dev/vmbus/hv_fcopy')
    command_exec(execMode, 'systemctl start hypervfcopyd.service')
    command_exec(execMode, 'sleep 1')
    test1 = reg.exec_test('hypervfcopyd.service', 'systemctl status hypervfcopyd.service', 'output', 'Active: active')
    testResult.append(test1)
    command_exec(execMode, 'systemctl stop hypervfcopyd.service')
    test1 = reg.exec_test('hypervfcopyd.service', 'systemctl status hypervfcopyd.service', 'output', 'Active: inactive')
    command_exec(execMode, 'rm -rf /dev/vmbus/')
    testResult.append(test1)

    command_exec(execMode, 'cp /usr/share/doc/stunnel/stunnel.conf-sample /etc/stunnel/stunnel.conf')
    command_exec(execMode, 'systemctl start stunnel.service')
    command_exec(execMode, 'sleep 1')
    test1 = reg.exec_test('stunnel.service', 'systemctl status stunnel.service', 'output', 'Active: active') # 실패 시 netstat -lpn | grep -e :25 -e :110로 사용중인 프로세스 파악 및 종료 이후 확인
    testResult.append(test1)
    command_exec(execMode, 'systemctl stop stunnel.service')
    test1 = reg.exec_test('stunnel.service', 'systemctl status stunnel.service', 'output', 'Active: inactive')
    command_exec(execMode, 'rm -rf /etc/stunnel/stunnel.conf')
    testResult.append(test1)

    command_exec(execMode, 'systemctl stop systemd-journald.service')
    command_exec(execMode, 'systemctl start systemd-journald-dev-log.socket')
    command_exec(execMode, 'sleep 1')
    test1 = reg.exec_test('systemd-journald-dev-log.socket', 'systemctl status systemd-journald-dev-log.socket', 'output', 'Active: active')
    testResult.append(test1)
    command_exec(execMode, 'systemctl stop systemd-journald-dev-log.socket')
    test1 = reg.exec_test('systemd-journald-dev-log.socket', 'systemctl status systemd-journald-dev-log.socket', 'output', 'Active: inactive')
    command_exec(execMode, 'systemctl start systemd-journald.service')
    testResult.append(test1)

    # 8.2 버전
    # command_exec(execMode, 'touch /var/crash/test')
    # command_exec(execMode, 'systemctl start abrtd.service')
    # command_exec(execMode, 'systemctl start abrt-vmcore.service')
    # test1 = reg.exec_test('abrt-vmcore.service', 'systemctl status abrt-vmcore.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'rm -rf /var/crash/test')
    # command_exec(execMode, 'systemctl stop abrtd.service')
    # command_exec(execMode, 'systemctl stop abrt-vmcore.service')
    # test1 = reg.exec_test('abrt-vmcore.service', 'systemctl status abrt-vmcore.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'mv /var/lib/cloud/instance /var/lib/cloud/instance_back') #/etc/ssh/sshd_config 내 PasswordAuthentication yes 주석 해제 필요
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled /etc/cloud/cloud-init.disabled.bak')
    # command_exec(execMode, 'systemctl start cloud-config.service')
    # test1 = reg.exec_test('cloud-config.service', 'systemctl status cloud-config.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'mv /var/lib/cloud/instance_back /var/lib/cloud/instance')
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled.bak /etc/cloud/cloud-init.disabled')
    # command_exec(execMode, 'systemctl stop cloud-config.service')
    # test1 = reg.exec_test('cloud-config.service', 'systemctl status cloud-config.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'mv /var/lib/cloud/instance /var/lib/cloud/instance_back')
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled /etc/cloud/cloud-init.disabled.bak')
    # command_exec(execMode, 'systemctl start cloud-final.service')
    # test1 = reg.exec_test('cloud-final.service', 'systemctl status cloud-final.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'mv /var/lib/cloud/instance_back /var/lib/cloud/instance')
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled.bak /etc/cloud/cloud-init.disabled')
    # command_exec(execMode, 'systemctl stop cloud-final.service')
    # test1 = reg.exec_test('cloud-final.service', 'systemctl status cloud-final.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'systemctl start dbus.socket')
    # command_exec(execMode, 'systemctl start dbus.service')
    # test1 = reg.exec_test('dbus.service', 'systemctl status dbus.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop dbus.socket')
    # command_exec(execMode, 'systemctl stop dbus.service')
    # test1 = reg.exec_test('dbus.service', 'systemctl status dbus.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'systemctl start httpd.service')
    # command_exec(execMode, 'sleep 1')
    # test1 = reg.exec_test('httpd.service', 'systemctl status httpd.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop httpd.service')
    # test1 = reg.exec_test('httpd.service', 'systemctl status httpd.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'mkdir -p /dev/vmbus/')
    # command_exec(execMode, 'touch /dev/vmbus/hv_fcopy')
    # command_exec(execMode, 'systemctl start hypervfcopyd.service')
    # command_exec(execMode, 'sleep 1')
    # test1 = reg.exec_test('hypervfcopyd.service', 'systemctl status hypervfcopyd.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop hypervfcopyd.service')
    # test1 = reg.exec_test('hypervfcopyd.service', 'systemctl status hypervfcopyd.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'rm -rf /dev/vmbus/')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'cp /usr/share/doc/stunnel/stunnel.conf-sample /etc/stunnel/stunnel.conf')
    # command_exec(execMode, 'systemctl start stunnel.service')
    # command_exec(execMode, 'sleep 1')
    # test1 = reg.exec_test('stunnel.service', 'systemctl status stunnel.service', 'output', 'Active: active') # 실패 시 netstat -lpn | grep -e :25 -e :110로 사용중인 프로세스 파악 및 종료 이후 확인
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop stunnel.service')
    # test1 = reg.exec_test('stunnel.service', 'systemctl status stunnel.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'rm -rf /etc/stunnel/stunnel.conf')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'systemctl stop systemd-journald.service')
    # command_exec(execMode, 'systemctl start systemd-journald-dev-log.socket')
    # command_exec(execMode, 'sleep 1')
    # test1 = reg.exec_test('systemd-journald-dev-log.socket', 'systemctl status systemd-journald-dev-log.socket', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop systemd-journald-dev-log.socket')
    # test1 = reg.exec_test('systemd-journald-dev-log.socket', 'systemctl status systemd-journald-dev-log.socket', 'output', 'Active: inactive')
    # command_exec(execMode, 'systemctl start systemd-journald.service')
    # testResult.append(test1)

    ##############################################################################################################################################

    # 7.8 버전
    # command_exec(execMode, 'systemctl start abrtd.service')
    # command_exec(execMode, 'systemctl start abrt-ccpp.service')
    # test1 = reg.exec_test('abrt-ccpp.service', 'systemctl status abrt-ccpp.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop abrt-ccpp.service')
    # test1 = reg.exec_test('abrt-ccpp.service', 'systemctl status abrt-ccpp.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'systemctl stop abrtd.service')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'systemctl start abrtd.service')
    # command_exec(execMode, 'systemctl start abrt-oops.service')
    # test1 = reg.exec_test('abrt-oops.service', 'systemctl status abrt-oops.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop abrt-oops.service')
    # test1 = reg.exec_test('abrt-oops.service', 'systemctl status abrt-oops.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'systemctl stop abrtd.service')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'touch /var/crash/test')
    # command_exec(execMode, 'systemctl start abrtd.service')
    # command_exec(execMode, 'systemctl start abrt-vmcore.service')
    # test1 = reg.exec_test('abrt-vmcore.service', 'systemctl status abrt-vmcore.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'rm -rf /var/crash/test')
    # command_exec(execMode, 'systemctl stop abrtd.service')
    # command_exec(execMode, 'systemctl stop abrt-vmcore.service')
    # test1 = reg.exec_test('abrt-vmcore.service', 'systemctl status abrt-vmcore.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'mv /var/lib/cloud/instance /var/lib/cloud/instance_back') #/etc/ssh/sshd_config 내 PasswordAuthentication yes 주석 해제 필요
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled /etc/cloud/cloud-init.disabled.bak')
    # command_exec(execMode, 'systemctl start cloud-config.service')
    # test1 = reg.exec_test('cloud-config.service', 'systemctl status cloud-config.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'mv /var/lib/cloud/instance_back /var/lib/cloud/instance')
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled.bak /etc/cloud/cloud-init.disabled')
    # command_exec(execMode, 'systemctl stop cloud-config.service')
    # test1 = reg.exec_test('cloud-config.service', 'systemctl status cloud-config.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'mv /var/lib/cloud/instance /var/lib/cloud/instance_back')
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled /etc/cloud/cloud-init.disabled.bak')
    # command_exec(execMode, 'systemctl start cloud-final.service')
    # test1 = reg.exec_test('cloud-final.service', 'systemctl status cloud-final.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'mv /var/lib/cloud/instance_back /var/lib/cloud/instance')
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled.bak /etc/cloud/cloud-init.disabled')
    # command_exec(execMode, 'systemctl stop cloud-final.service')
    # test1 = reg.exec_test('cloud-final.service', 'systemctl status cloud-final.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'systemctl start dbus.service')
    # test1 = reg.exec_test('dbus.service', 'systemctl status dbus.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop dbus.socket')
    # test1 = reg.exec_test('dbus.service', 'systemctl status dbus.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'systemctl start dbus.service')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'mkdir -p /dev/vmbus/')
    # command_exec(execMode, 'touch /dev/vmbus/hv_fcopy')
    # command_exec(execMode, 'systemctl start hypervfcopyd.service')
    # command_exec(execMode, 'sleep 1')
    # test1 = reg.exec_test('hypervfcopyd.service', 'systemctl status hypervfcopyd.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop hypervfcopyd.service')
    # test1 = reg.exec_test('hypervfcopyd.service', 'systemctl status hypervfcopyd.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'rm -rf /dev/vmbus/')
    # testResult.append(test1)
    ##############################################################################################################################################

    # 7.9 버전
    # command_exec(execMode, 'systemctl start abrtd.service')
    # command_exec(execMode, 'systemctl start abrt-ccpp.service')
    # test1 = reg.exec_test('abrt-ccpp.service', 'systemctl status abrt-ccpp.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop abrt-ccpp.service')
    # test1 = reg.exec_test('abrt-ccpp.service', 'systemctl status abrt-ccpp.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'systemctl stop abrtd.service')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'systemctl start abrtd.service')
    # command_exec(execMode, 'systemctl start abrt-oops.service')
    # test1 = reg.exec_test('abrt-oops.service', 'systemctl status abrt-oops.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop abrt-oops.service')
    # test1 = reg.exec_test('abrt-oops.service', 'systemctl status abrt-oops.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'systemctl stop abrtd.service')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'touch /var/crash/test')
    # command_exec(execMode, 'systemctl start abrtd.service')
    # command_exec(execMode, 'systemctl start abrt-vmcore.service')
    # test1 = reg.exec_test('abrt-vmcore.service', 'systemctl status abrt-vmcore.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'rm -rf /var/crash/test')
    # command_exec(execMode, 'systemctl stop abrtd.service')
    # command_exec(execMode, 'systemctl stop abrt-vmcore.service')
    # test1 = reg.exec_test('abrt-vmcore.service', 'systemctl status abrt-vmcore.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled /etc/cloud/cloud-init.disabled.bak')
    # command_exec(execMode, 'systemctl start cloud-config.service')
    # test1 = reg.exec_test('cloud-config.service', 'systemctl status cloud-config.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop cloud-config.service')
    # command_exec(execMode, 'mv /etc/cloud/cloud-init.disabled.bak /etc/cloud/cloud-init.disabled')
    # test1 = reg.exec_test('cloud-config.service', 'systemctl status cloud-config.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'systemctl start cloud-final.service')
    # test1 = reg.exec_test('cloud-final.service', 'systemctl status cloud-final.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop cloud-final.service')
    # test1 = reg.exec_test('cloud-final.service', 'systemctl status cloud-final.service', 'output', 'Active: inactive')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'systemctl start dbus.service')
    # test1 = reg.exec_test('dbus.service', 'systemctl status dbus.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop dbus.socket')
    # command_exec(execMode, 'systemctl stop dbus.service')
    # test1 = reg.exec_test('dbus.service', 'systemctl status dbus.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'systemctl start dbus.service')
    # testResult.append(test1)
    #
    # command_exec(execMode, 'mkdir -p /dev/vmbus/')
    # command_exec(execMode, 'touch /dev/vmbus/hv_fcopy')
    # command_exec(execMode, 'systemctl start hypervfcopyd.service')
    # command_exec(execMode, 'sleep 1')
    # test1 = reg.exec_test('hypervfcopyd.service', 'systemctl status hypervfcopyd.service', 'output', 'Active: active')
    # testResult.append(test1)
    # command_exec(execMode, 'systemctl stop hypervfcopyd.service')
    # test1 = reg.exec_test('hypervfcopyd.service', 'systemctl status hypervfcopyd.service', 'output', 'Active: inactive')
    # command_exec(execMode, 'rm -rf /dev/vmbus/')
    # testResult.append(test1)

    # save result to csv
    reg.export_csv(testResult, RESULT_PATH + '/manual_'+VERSION_DETAIL+'_daemon2_result.csv', 'name;result;msg')

    return testResult

if __name__=="__main__":

    makeFolder(RESULT_PATH) # 결과저장 폴더 만들기

    main()
